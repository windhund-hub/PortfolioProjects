# -*- coding: utf-8 -*-
# Ermitteln einer Webserververzeichnisstruktur
import Queue # zur Handhabung von queues
import threading # zur Handhabung von Threads
import urllib2 # zur Handhabung von URLs
import argparse # zur Erleichterung der Kommandozeileneingaben

# filtert Wörter aus Datei heraus und bildet Reihe damit
# @param filename: str; Dictionary
# @return queu: Queue mit den rausgefilterten Wörter
def set_words(filename):
    # Initialisierung Queue-Objekt
    queu = Queue.Queue()
    # liesst Datei zeilenweise aus
    with open(filename) as f:
        words = f.readlines()
    # entfernt Zeichen für Zeilenumbrüche aus Wörter
    words = [x.replace("\r\n", "") for x in words]
    # bildet Reihe aus Wörter
    for w in words:
        queu.put(w)

    return queu

# Testet Url auf verschiedene Pfade
# @param dict_words: obj; Reihe von Wörtern die geprüft werden
def check_urlPaths(dict_words, target):
    word_list = []

    # baut Wörterliste auf
    # prüft ob Ordner oder Datei
    while not dict_words.empty():
        word = dict_words.get()

        if '.' not in word:
            word_list.append('%s/' % word)
        else:
            word_list.append('%s' % word)


    for word in word_list:
        # fügt zu prüfende URL zusammen
        url = "%s%s" %(target, word)
        # URL-Anfrage
        request = urllib2.Request(url)
        try:
            # Antwort auf URL-Anfrage
            response = urllib2.urlopen(request)
            response.read()
            # Ausgabe des wenn Verzeichnis oder Datei gefunden
            print "[%d] => %s" % (response.code, url)
            response.close()
        except urllib2.HTTPError as error:
            pass


def main():
    # initialisiert Objekt parser
    parser = argparse.ArgumentParser()
    # Kommandozeilen-Argumente
    parser.add_argument('-t', dest='targetURL', \
                        type=str, help='specify the url', \
                        required=True)
    parser.add_argument('-f', dest='dictFile', \
                        type=str, help='specify the Path with DictFile', \
                        required=True)
    parser.add_argument('-T', dest='threads', \
                        type=int, help='specify the number of Threads', \
                        required=False)
    args = parser.parse_args()

    threads = 1

    # prüft ob Anzahl Threads angegeben wurde, ansonsten wird nur einer verwendet
    if args.threads:
        threads = args.threads

    # IP der Zielmaschine
    target = args.targetURL
    # setzt Wortliste
    dict_words = set_words(args.dictFile)

    # durchläuft Threads
    for i in range(threads):
        # Methode die 'gethreaded' wird
        t = threading.Thread(target=check_urlPaths, args=(dict_words,target))
        t.start()

if __name__== '__main__':
    main()