# Untersuchung von Kommunikation, sowie HTTP-Informationen
import dpkt
import socket

# untersucht eine uebergebene *.pcap-Datei nach IP-Adressen
# @param pcap: pcap-Datei 
# @param target_ip: gesuchte IP-Adresse
def printPcap(pcap, target_ip):
    for(timestamp, buf) in pcap:
        try:
            eth = dpkt.ethernet.Ethernet(buf)
            ip = eth.data
            tcp = ip.data
            src = socket.inet_ntoa(ip.src)
            dst = socket.inet_ntoa(ip.dst)
            
            ipInfo(src, target_ip, tcp)
            ipInfo(dst, target_ip, tcp)

        except:
            pass

# Vergleich der IP-Adressen, sowie Ausgabe der HTTP-Informationen
# @param ip: IP-Adresse aus Datei
# @param target_ip: gesuchte IP-Adresse
# @param tcp: TCP
def ipInfo(ip, target_ip, tcp):
    # gesuchte IP als Array aufgesplittet
    ip_pattern = target_ip.split('.')
    # Datei-IP als Array aufgesplittet
    ip_ar = ip.split('.')
    # letzter Wert des Arrays wird wie bei Pattern gesetzt
    ip_ar[3] = ''
    # Vergleich der beiden IP's
    if ip_ar == ip_pattern:
        if tcp.dport == 80 and len(tcp.data) > 0:
            http = dpkt.http.Request(tcp.data)
            # Ausgabe der HTTP-Infos
            print http.headers['user-agent']
            print http.headers['host']
            print ip
            print '---------------------------'

# oeffnet pcap-Datei und initialisiert Objekt
# uebergibt pcap-Datei und gesuchte IP-Adresse
def main():
    f = open('capture.pcap')
    pcap = dpkt.pcap.Reader(f)
    printPcap(pcap, "192.168.179.")

if __name__ == '__main__':
    main()