# Untersuchung der Kommunikation von digitalen Paketen 
import dpkt
import socket

# untersucht eine uebergebene *.pcap-Datei nach IP-Adressen und zaehlt die Pakete
# @param pcap: pcap-Datei 
def printPcap(pcap):
    counter = 0
    counter_ip = 0
    counter_tcp = 0
    counter_udp = 0
    for(timestamp, buf) in pcap:
        try:
            eth = dpkt.ethernet.Ethernet(buf)
            counter += 1
            # untersuchen auf IP-Pakete
            if eth.type == dpkt.ethernet.ETH_TYPE_IP:
                counter_ip += 1
                # untersuchen auf TCP
                if eth.data.p == dpkt.ip.IP_PROTO_TCP:
                    counter_tcp += 1
                # untersuchen auf UDP
                elif eth.data.p == dpkt.ip.IP_PROTO_UDP:
                    counter_udp += 1
            ip = eth.data
            src = socket.inet_ntoa(ip.src)
            dst = socket.inet_ntoa(ip.dst)
            print '[+] Src: %s --> Dst: %s' %(src,dst)
        except:
            pass
    print 'Die Datei hat %s Pakete.' % counter
    print 'Die Datei hat %s IP-Pakete.' % counter_ip
    print 'Die Datei hat %s TCP-Pakete.' % counter_tcp
    print 'Die Datei hat %s UDP-Pakete.' % counter_udp

# oeffnet pcap-Datei und initialisiert Objekt
def main():
    f = open('capture.pcap')
    # pcap wird initialisiert
    pcap = dpkt.pcap.Reader(f)
    printPcap(pcap)

if __name__ == '__main__':
    main()